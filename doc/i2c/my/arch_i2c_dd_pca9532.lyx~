#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\options 12pt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\rightmargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
<<<<<<< HEAD:doc/device_driver/i2c/my/arch_i2c_dd_pca9532.lyx
I2C LED device driver (PCA9532)
=======
<<<<<<< HEAD
I2C LED device driver
=======
<<<<<<< HEAD
I2C LED device driver
=======
I2C device driver
>>>>>>> 2f1b588f47b2d479d136a42387a23e15564ba327
>>>>>>> c472010b5a7c260dc91d53a58c9044788e1aa511
>>>>>>> 42ec060828fc0984a4971b7cf2d09e7a6146cd13:doc/device_driver/i2c/my/arch_i2c_dd_pca9532.lyx~
\end_layout

\begin_layout Author
Ajay Sharma
\end_layout

\begin_layout Date
2014/08/25
\end_layout

\begin_layout Date
v0.1
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Section
CHANGES
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle" tabularwidth="80page%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description of change
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Date
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First Draft
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2014/08/25
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
USER SPACE ACCESS
\end_layout

\begin_layout Standard
\begin_inset Foot
status open

\begin_layout Plain Layout
NOTE: I need to describe the method to add the module to Kconfig and Makefile.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The file led.c is used to allow to the LEDs from the user space.
 Example of a command to turn on LED 1 is 
\end_layout

\begin_layout LyX-Code
$./led 1 on
\end_layout

\begin_layout Standard
The following gets sent to driver.
 
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
State
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Off
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
 XXXX_XX00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XXXX_XX01
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LED Data 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The file used to write is /sys/bus/i2c/devices/0-0060/ls2.
\end_layout

\begin_layout Section
BOARD SUPPORT
\end_layout

\begin_layout Standard
Linux wants to keep board support information in a seperate place.
 In 
\end_layout

\begin_layout Standard
arch/arm/mach-lpc22xx/lpc2468_ea_board.c the i2c is setup as below .
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*-------------------------------------------------
\end_layout

\begin_layout LyX-Code
*  I2C  
\end_layout

\begin_layout LyX-Code
* -------------------------------------------------*/
\end_layout

\begin_layout LyX-Code
/* I2C board specific data */
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
struct lpc2xxx_i2c_pdata lpc2xxx_i2c_pdata = { 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
0,	// fpclk is set in the init function below
\end_layout

\begin_layout LyX-Code
100000,	// freq in Hz 	
\end_layout

\begin_layout LyX-Code
100,	// timeout 
\end_layout

\begin_layout LyX-Code
3,	// retries 
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
static void __init lpc2468_ea_init_i2c_pins(void) 
\end_layout

\begin_layout LyX-Code
{ 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
lpc2xxx_i2c_pdata.fpclk = lpc_get_fpclk();
\end_layout

\end_deeper
\begin_layout LyX-Code
#if defined(CONFIG_LPC2XXX_I2C0)
\end_layout

\begin_deeper
\begin_layout LyX-Code
lpc22xx_set_periph(LPC22XX_PIN_P0_28, 1, 0);// SCL0
\end_layout

\begin_layout LyX-Code
lpc22xx_set_periph(LPC22XX_PIN_P0_27, 1, 0);// SDA0
\end_layout

\end_deeper
\begin_layout LyX-Code
#endif 
\end_layout

\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard
The i2c interface operates at 100KHz and P0.28, 27 are used for the I2C functions.
\end_layout

\begin_layout Section
DEVICE DRIVER
\end_layout

\begin_layout Standard
An i2c Linux architecture contains bus and client drivers.
 Bus drivers further contains adapter and algorithm driver.
 The adapter is the one that is attached directly to the CPU and is sort
 of acting as an adapter on the system.
 It can have its own algorithmm to support I2C.
 The algorithm driver is used when the adapter cannot support its own algorithm
 (Not sure how TBD).
 The client is connected to the adapter over the I2C bus.
 Either the adapter or the client can initiate the transfer.
 They can both act as a slave as well.
 In the file i2c-lpc2xxx.c, the master I2C hw block in the LPC2468 is registered
 as an adapter.
 In pca9532.c, the led dimmer on the I2C bus which is a slave device is registere
d as a client.
 
\end_layout

\begin_layout Subsection
Write Byte
\end_layout

\begin_layout Standard
In a typical I2C write command, there are 3 parts: 
\end_layout

\begin_layout Itemize
Slave Address
\end_layout

\begin_layout Itemize
Command Byte(Register address)
\end_layout

\begin_layout Itemize
Data to be written
\end_layout

\begin_layout Standard
The packet information is given below.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Packet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Slave address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x60
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x08
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x01
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Data packet
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/user1/prsnl/dev/uclinux/ucl_dev/doc/device_driver/i2c/write_i2c_packets.png
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SMBus/I2C write byte command packets
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Command Byte
\end_layout

\begin_layout Standard
The declaration of smbus write function is 
\emph on
s32 i2c_smbus_write_byte_data(struct i2c_client *client, u8 command, u8
 value); 
\emph default
The i2c_client is the pca9532, the command is the index set for the command
 in the device attribute and the value is the data we pass.
 
\end_layout

\begin_layout LyX-Code
enum pca9532_cmd { 	...
\end_layout

\begin_deeper
\begin_layout LyX-Code
PCA9532_LS_2		= 8, 	
\end_layout

\begin_layout LyX-Code
PCA9532_LS_3		= 9, 
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#define PCA9532_ENTRY_RW(name, cmd_idx) 
\backslash
 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
static SENSOR_DEVICE_ATTR(name, S_IRUGO | S_IWUSR, pca9532_show, 
\backslash

\end_layout

\begin_layout LyX-Code
				  pca9532_store, cmd_idx) 
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
PCA9532_ENTRY_RW(ls2,    PCA9532_LS_2);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
struct sensor_device_attribute *psa = to_sensor_dev_attr(attr);
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code
i2c_smbus_write_byte_data(client, psa->index, val);
\end_layout

\begin_layout Standard
When calling the write byte, the psa->index now becomes 8; which turns out
 to the register address of 8.
\end_layout

\begin_layout Subsubsection
Slave Address
\end_layout

\begin_layout Standard
The slave address is 7 bits.
 Its set constant at 0x60 as the hardware address pins A0-A2 are grounded.
 Although the register description may look like 1100_A2A1A0, We only consider
 the 7 bits and put it this way: 110_0A2A1A0.
 This make is 0x60.
 But when we set the register value, we set it with the Read/_Write flag
 as well.
 So now it becomes 1100_A2A1A0R/W_, which is now: 0xC0.
 
\end_layout

\begin_layout LyX-Code
/* i2c_client_address_data is the struct for holding default client  
\end_layout

\begin_layout LyX-Code
* addresses for a driver and for the parameters supplied on the  
\end_layout

\begin_layout LyX-Code
* command line  
\end_layout

\begin_layout LyX-Code
*/ 
\end_layout

\begin_layout LyX-Code
struct i2c_client_address_data { 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
unsigned short *normal_i2c; 	
\end_layout

\begin_layout LyX-Code
unsigned short *probe; 	
\end_layout

\begin_layout LyX-Code
unsigned short *ignore; 	
\end_layout

\begin_layout LyX-Code
unsigned short **forces; 
\end_layout

\begin_layout LyX-Code
}; 
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
static struct i2c_client_address_data addr_data = {
\backslash
 
\end_layout

\begin_deeper
\begin_layout LyX-Code
.normal_i2c = normal_i2c,
\backslash

\end_layout

\begin_layout LyX-Code
.probe = probe,
\backslash
 
\end_layout

\begin_layout LyX-Code
.ignore = ignore,
\backslash

\end_layout

\begin_layout LyX-Code
.forces = forces,
\backslash
 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout LyX-Code
/* Addresses to scan */ 
\end_layout

\begin_layout LyX-Code
static unsigned short normal_i2c[] = 
\backslash

\end_layout

\begin_deeper
\begin_layout LyX-Code
{0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67, I2C_CLIENT_END}; 
\end_layout

\end_deeper
\begin_layout Standard
Declared in 
\bar under
i2c.h
\bar default
, 
\emph on
i2c_client_address_data
\emph default
 has a static variable definition of 
\emph on
addr_data
\emph default
.
 Its member variable 
\emph on
normal_i2c
\emph default
 is initialized to
\emph on
 0x60....

\emph default
 in the pca9532.c file.
 While writing to the SMBus, the address is used by the i2c driver.
\end_layout

\begin_layout Standard
Below is the schematic for pca9532 on the base oem board.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/user1/prsnl/dev/uclinux/ucl_dev/doc/device_driver/i2c/pca9532_schematic.png
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
pca9532 schematic
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Call Hierarchy
\end_layout

\begin_layout Standard
Inorder to write to the slave, sysfs file write call the pca9532_store().
 This calls a generic 
\emph on
i2c_smbus_write_byte_data()
\emph default
 with the client struct, command index(register address) and data value.
 i2c core file tries to see if the adapter supports smbus_xfer which should
 be set to a valid value in the adapter.
 In lpc24xx its NULL, so an emulated version of smbus is called instead.
 This emulation fills up data as per SMBus specification and calls i2c_transfer
 for the adapter.
 The lpc2xx adapter driver does fill up the master_xfer member variable
 with a valid xfer function which is then called.
 In the The flow of the call is given below.
\end_layout

\begin_layout LyX-Code
974: i2c_smbus_xfer(client->adapter,client->addr,client->flags,
\backslash

\end_layout

\begin_deeper
\begin_layout LyX-Code
I2C_SMBUS_WRITE,command, I2C_SMBUS_BYTE_DATA,&data);
\end_layout

\end_deeper
\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code
1203: res =
\backslash

\end_layout

\begin_deeper
\begin_layout LyX-Code
i2c_smbus_xfer_emulated(adapter,addr,flags,read_write, 
\backslash
                                      command,size,data);
\end_layout

\end_deeper
\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
1157: i2c_transfer(adapter, msg, num);
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
648: ret = adap->algo->master_xfer(adap,msgs,num);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/user1/prsnl/dev/uclinux/ucl_dev/doc/device_driver/i2c/write_i2c_flow.png
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
i2c driver write process
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Initialization
\end_layout

\begin_layout Standard
When ever a module is loaded to the kernel memory some initialization routines
 are called.
 Loading a module is done using either 
\emph on
insmod
\emph default
 or 
\emph on
modprobe
\emph default
.
 In case of this driver the module init is done using 
\emph on
module_init
\emph default
 function.
 
\end_layout

\begin_layout LyX-Code
module_init(pca9532_init);
\end_layout

\begin_layout Standard
Here the function pca9532_init is passed as a parameter and is defined with
 the type 
\emph on
__init
\emph default
 type.
 This means its loaded before the main function is called.
 
\end_layout

\begin_layout LyX-Code
static int __init pca9532_init(void)
\end_layout

\begin_layout Standard
pca9532_init calls i2c_add_driver() to add a static driver data structure
 to the i2c core.
 Details of i2c driver structure is below.
\end_layout

\begin_layout LyX-Code
/* This is the driver that will be inserted */ 
\end_layout

\begin_layout LyX-Code
static struct i2c_driver pca9532_driver = { 
\end_layout

\begin_layout LyX-Code
  .driver = { 
\end_layout

\begin_layout LyX-Code
    .name = "pca9532", 
\end_layout

\begin_layout LyX-Code
  }, 
\end_layout

\begin_layout LyX-Code
  .attach_adapter = pca9532_attach_adapter, 
\end_layout

\begin_layout LyX-Code
  .detach_client = pca9532_detach_client, 
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout Standard
Prototpye for the i2c_driver is below:
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Driver writer is required to fill in the name for the driver.
 Also attach_adapter and detach_client are functions passed.
 <TBD> why is attach_adapter and detach_client? why not adapter, adapter
 or client client? 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename i2c_client_init.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
i2c client init
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Detection
\end_layout

\begin_layout Standard
In creating a device driver for the pca9532 its required to provide functions
 that get triggered when the adapter is attached.
 When the adapter is initialized the pca9532_attach_adapter is called.
 The prototype of 
\emph on
attach_adapter
\emph default
 is given below.
 This function then calls i2c_probe passing the pca9532_detect function.
 
\end_layout

\begin_layout LyX-Code
static int pca9532_attach_adapter(struct i2c_adapter *adapter);
\end_layout

\begin_layout Standard
i2c_probe function requires the following arguments: 
\end_layout

\begin_layout LyX-Code
int i2c_probe(struct i2c_adapter *adapter, 
\end_layout

\begin_layout LyX-Code
struct i2c_client_address_data *address_data, 
\end_layout

\begin_layout LyX-Code
int (*found_proc) (struct i2c_adapter *, int, int));
\end_layout

\begin_layout Standard
It needs an adapter structure, the client address structure and a procedure
 to call when a client is attached? The found procedure prototype matches
 our detect function below.
 Obviously pca9532_detect is then called.
 
\end_layout

\begin_layout LyX-Code
static int pca9532_detect(struct i2c_adapter *adapter, int address, int
 kind);
\end_layout

\begin_layout Standard
138: In the detection phase, the client checks its adapter's functionality
 to see if its supports SMBus byte data transfers.
 The check functionality function is defined in linux-2.6.x./include/linux/i2c.h
 as an inline function.
 The adapter(i2c-lpc2xxx.c) initializes a i2c_algorithm structure with a
 functionality of I2C and SMBus emulation and a method that is returning
 it.
 The check returns positive since the SMBus emulation does mean that the
 SMBus write bytes are supported.
 Functionality masks are 
\emph on
#defined
\emph default
 in the i2c.h file as well.
 
\end_layout

\begin_layout Standard
143: Now space is allocated for the client structure using kzalloc.
 kzalloc allocates memory which is set to zero.
 GFP_KERNEL is passed as a flag to the memory allocation inorder to block
 waiting for the memory allocation.
 Kernel does its best to try and allocate the memory and the process may
 sleep waiting for the memory allocation.
 This is by default the best choice.
 Prototype of i2c_client structure is given below.
 i2c_set_clientdata sets the client in the 
\emph on
struct device
\emph default
.
 This structure is defined in linux/device.h.
 It probably holds the highest level of device data? <TBD: Double check>.
 Address, driver structure and flags(0) is set for the client.
 
\end_layout

\begin_layout Standard
22: Inorder to set the address, i2c_probe function searches 
\emph on
struct i2c_client_address_data
\emph default
 for the 
\emph on
normal_i2c[]
\emph default
 address.
 i2c_client_address_data is a 
\emph on
static
\emph default
 struct with a member variable normal_i2c in the i2c.h header file and so
 it is required to 
\emph on
define normal_i2c[]
\emph default
 in the pca9532.c file.
 
\end_layout

\begin_layout Standard
166: Finally the i2c_attach_client() is called to attach this new client
 to the device core.
 
\end_layout

\begin_layout Standard
170: sysfs hook ups are created with the default attribute.
 
\end_layout

\begin_layout Subsubsection
Detachment
\end_layout

\begin_layout Standard
Inorder to detach the client, it is removed by calling 
\emph on
sysfs_remove_group, i2c_detach_client
\emph default
 and freeing the kernel memory for the client by 
\emph on
kfree
\emph default
.
 
\end_layout

\begin_layout Subsection
Structure reference
\end_layout

\begin_layout Standard
The various structures used here are described in linux-2.6.x/include/linux/i2c.h
 file.
\end_layout

\begin_layout Standard
Prototype of i2c_client_address_data is below:
\end_layout

\begin_layout LyX-Code
/* i2c_client_address_data is the struct for holding default client  
\end_layout

\begin_layout LyX-Code
* addresses for a driver and for the parameters supplied on the  
\end_layout

\begin_layout LyX-Code
* command line  
\end_layout

\begin_layout LyX-Code
*/ 
\end_layout

\begin_layout LyX-Code
struct i2c_client_address_data{ 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
unsigned short *normal_i2c; 	
\end_layout

\begin_layout LyX-Code
...
 
\end_layout

\end_deeper
\begin_layout LyX-Code
}; 
\end_layout

\begin_layout LyX-Code
/*  
\end_layout

\begin_layout LyX-Code
 * i2c_adapter is the structure used to identify a physical i2c bus along
\end_layout

\begin_layout LyX-Code
 * with the access algorithms necessary to access it.
  
\end_layout

\begin_layout LyX-Code
*/ 
\end_layout

\begin_layout LyX-Code
struct i2c_adapter { 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
struct module *owner; 	
\end_layout

\begin_layout LyX-Code
....
 	
\end_layout

\begin_layout LyX-Code
const struct i2c_algorithm *algo; /* the algorithm to access the bus */
 	
\end_layout

\begin_layout LyX-Code
....	
\end_layout

\begin_layout LyX-Code
....
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/* 
\end_layout

\begin_layout LyX-Code
* A driver is capable of handling one or more physical devices present on
 
\end_layout

\begin_layout LyX-Code
* I2C adapters.
 This information is used to inform the driver of adapter 
\end_layout

\begin_layout LyX-Code
* events.
 
\end_layout

\begin_layout LyX-Code
* 
\end_layout

\begin_layout LyX-Code
* The driver.owner field should be set to the module owner of this driver.
 
\end_layout

\begin_layout LyX-Code
* The driver.name field should be set to the name of this driver.
 
\end_layout

\begin_layout LyX-Code
*/
\end_layout

\begin_layout LyX-Code
struct i2c_driver { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
int id; 
\end_layout

\begin_layout LyX-Code
unsigned int class;
\end_layout

\begin_layout LyX-Code
/* Notifies the driver that a new bus has appeared.
 This routine 
\end_layout

\begin_layout LyX-Code
* can be used by the driver to test if the bus meets its conditions 
\end_layout

\begin_layout LyX-Code
* & seek for the presence of the chip(s) it supports.
 If found, it 
\end_layout

\begin_layout LyX-Code
* registers the client(s) that are on the bus to the i2c admin.
 via 
\end_layout

\begin_layout LyX-Code
* i2c_attach_client.
 
\end_layout

\begin_layout LyX-Code
*/ 
\end_layout

\begin_layout LyX-Code
int (*attach_adapter)(struct i2c_adapter *); 
\end_layout

\begin_layout LyX-Code
int (*detach_adapter)(struct i2c_adapter *);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/* tells the driver that a client is about to be deleted & gives it 
\end_layout

\begin_layout LyX-Code
* the chance to remove its private data.
 Also, if the client struct 
\end_layout

\begin_layout LyX-Code
* has been dynamically allocated by the driver in the function above, 
\end_layout

\begin_layout LyX-Code
* it must be freed here.
 */ 
\end_layout

\begin_layout LyX-Code
int (*detach_client)(struct i2c_client *);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
struct device_driver driver; 
\end_layout

\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/* 
\end_layout

\begin_layout LyX-Code
* i2c_client identifies a single device (i.e.
 chip) that is connected to an 
\end_layout

\begin_layout LyX-Code
* i2c bus.
 The behaviour is defined by the routines of the driver.
 This 
\end_layout

\begin_layout LyX-Code
* function is mainly used for lookup & other admin.
 functions.
 
\end_layout

\begin_layout LyX-Code
*/ 
\end_layout

\begin_layout LyX-Code
struct i2c_client { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
unsigned int flags;   /* div., see below */ 
\end_layout

\begin_layout LyX-Code
unsigned short addr;  /* chip address - NOTE: 7bit */ 
\end_layout

\begin_layout LyX-Code
                      /* addresses are stored in the */ 
\end_layout

\begin_layout LyX-Code
                      /* _LOWER_ 7 bits */ 
\end_layout

\begin_layout LyX-Code
struct i2c_adapter *adapter; /* the adapter we sit on */ 
\end_layout

\begin_layout LyX-Code
struct i2c_driver *driver;   /* and our access routines */ 
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
char name[I2C_NAME_SIZE]; 
\end_layout

\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
